;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;
;#define openBtn 1023
;#define closeBtn 731
;#define leftBtn 539
;#define rightBtn 394
;#define upBtn 269
;#define downBtn 146
;#define OC_DDR DDRB.3
;#define LR_DDR DDRD.5
;#define UD_DDR DDRD.6
;#define OC_PORT PORTB.3
;#define LR_PORT PORTB.5
;#define UD_PORT PORTB.6
;#define TRIGGER_DDR DDRD.0
;#define ECHO_DDR DDRD.1
;#define TRIGGER_PORT PORTD.0
;#define ECHO_PORT PORTD.1
;#define ECHO_PIN PIND.1
;#define ADC_VREF_TYPE 0x40
;
;int distant;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001F // Delay needed for the stabilization of the ADC input voltage
; 0000 0020 delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 0021 // Start the AD conversion
; 0000 0022 ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0023 // Wait for the AD conversion to complete
; 0000 0024 while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0025 ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0026 return ADCW;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0027 }
;PCODE: $00000022 VOL: 0
;
;void activeDistantSensor()
; 0000 002A {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002B     int duration;
; 0000 002C     unsigned int i;
; 0000 002D     char buffer[];
; 0000 002E     // Trigger transmit pulse
; 0000 002F     TRIGGER_PORT = 0;
;PCODE: $00000025 VOL: 0
;	duration -> R16,R17
;	i -> R18,R19
;	buffer -> Y+4
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0030     delay_ms(2);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0031     TRIGGER_PORT = 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0032     delay_ms(10);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0033     TRIGGER_PORT = 0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0034     //Measure duty cycle of Echo
; 0000 0035     TCNT1H=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0036     TCNT1L=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0037     TCCR1B=0b00000101;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0038     while(ECHO_PIN == 0)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0039     {
; 0000 003A 
; 0000 003B     }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003C     i = (TCNT1H*256 + TCNT1L);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003D     duration = i*0.128;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 003E     distant = duration/2/29.412;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003F     sprintf(buffer, "Dis: %0.3f cm", i);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0040     lcd_puts(buffer);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0041 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;void disPlayLCD(unsigned int thamSo)
; 0000 0044 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0045     unsigned char chucNgan, ngan, tram, chuc, donVi;
; 0000 0046     chucNgan = thamSo/10000;
;PCODE: $00000069 VOL: 0
;	thamSo -> Y+6
;	chucNgan -> R17
;	ngan -> R16
;	tram -> R19
;	chuc -> R18
;	donVi -> R21
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0047     ngan = thamSo/1000%10;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0048     tram = thamSo/100%10;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0049     chuc = thamSo/10%10;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004A     donVi = thamSo%10;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004B     lcd_putchar(chucNgan + 48);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 004C     lcd_putchar(ngan + 48);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004D     lcd_putchar(tram + 48);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 004E     lcd_putchar(chuc + 48);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 004F     lcd_putchar(donVi + 48);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0050 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;// Open mirror
;void open()
; 0000 0054 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0055     OCR2A = 20;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0056     lcd_puts("Opening");
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0057     delay_ms(1500);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0058 }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0

	.DSEG
_0xF:
	.BYTE 0x8
;
;// Close mirror
;void close()
; 0000 005C {

	.CSEG
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 005D     OCR2A = 5;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 005E     OCR0B = 15;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 005F     OCR0A = 15;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0060     lcd_puts("Closing");
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0061     delay_ms(1500);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0062 }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0

	.DSEG
_0x10:
	.BYTE 0x8
;
;// Adjust left
;void adjustLeft()
; 0000 0066 {

	.CSEG
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0067     if(OCR0B > 10)
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0068     {
; 0000 0069         OCR0B--;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 006A         lcd_puts("Adjusting Left");
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 006B     }
; 0000 006C     else
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 006D     {
; 0000 006E         lcd_puts("Completely Left");
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 006F         delay_ms(500);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0070     }
;PCODE: $000000D3 VOL: 0
; 0000 0071 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0

	.DSEG
_0x12:
	.BYTE 0x1F
;
;// Adjust right
;void adjustRight()
; 0000 0075 {

	.CSEG
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0076     if(OCR0B < 19)
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0077     {
; 0000 0078         OCR0B++;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0079         lcd_puts("Adjusting Right");
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 007A     }
; 0000 007B     else
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 007C     {
; 0000 007D         lcd_puts("Completely Right");
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 007E         delay_ms(500);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 007F     }
;PCODE: $000000EC VOL: 0
; 0000 0080 }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0

	.DSEG
_0x15:
	.BYTE 0x21
;
;// Adjust up
;void adjustUp()
; 0000 0084 {

	.CSEG
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0085     if(OCR0A < 19)
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0086     {
; 0000 0087         OCR0A++;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0088         lcd_puts("Adjusting Up");
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0089     }
; 0000 008A     else
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 008B     {
; 0000 008C         lcd_puts("Completely Up");
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 008D         delay_ms(500);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 008E     }
;PCODE: $00000105 VOL: 0
; 0000 008F }
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0

	.DSEG
_0x18:
	.BYTE 0x1B
;
;// Adjust down
;void adjustDown()
; 0000 0093 {

	.CSEG
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0094     if(OCR0A > 10)
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0095     {
; 0000 0096         OCR0A--;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0097         lcd_puts("Adjusting Down");
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0098     }
; 0000 0099     else
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 009A     {
; 0000 009B         lcd_puts("Completely Down");
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 009C         delay_ms(500);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 009D     }
;PCODE: $0000011E VOL: 0
; 0000 009E }
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0

	.DSEG
_0x1B:
	.BYTE 0x1F
;
;void main(void)
; 0000 00A1 {

	.CSEG
;PCODE: $00000121 VOL: 0
; 0000 00A2 unsigned int curBtn;
; 0000 00A3 
; 0000 00A4 // Crystal Oscillator division factor: 1
; 0000 00A5 #pragma optsize-
; 0000 00A6 CLKPR=0x80;
;	curBtn -> R16,R17
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00A7 CLKPR=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00A8 #ifdef _OPTIMIZE_SIZE_
; 0000 00A9 #pragma optsize+
; 0000 00AA #endif
; 0000 00AB 
; 0000 00AC // Timer/Counter 0 initialization
; 0000 00AD TCCR0A=0b10100011;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00AE TCCR0B=0b00000101;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00AF TCNT0=0;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00B0 OCR0A=15;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00B1 OCR0B=15;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00B2 
; 0000 00B3 // Timer/Counter 2 initialization
; 0000 00B4 TCCR2A=0b10000011;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00B5 TCCR2B=0b00000111;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00B6 TCNT2=0;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00B7 OCR2A=0;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00B8 OCR2B=0;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00B9 
; 0000 00BA // Timer/Counter 1 initialization
; 0000 00BB TCCR1A=0x00;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00BC TCCR1B=0b00000101;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00BD TCNT1H=10;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00BE TCNT1L=10;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00BF 
; 0000 00C0 // ADC initialization
; 0000 00C1 DIDR0=0x20;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00C2 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00C3 ADCSRA=0x81;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00C4 
; 0000 00C5 // Characters/line: 16
; 0000 00C6 lcd_init(16);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00C7 
; 0000 00C8 //Set up PWM Servo ports is output
; 0000 00C9 OC_DDR = 1;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00CA LR_DDR = 1;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00CB UD_DDR = 1;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00CC 
; 0000 00CD // Set up Trigger and Echo for Sensor
; 0000 00CE TRIGGER_DDR = 1; // Trigger port is output
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00CF ECHO_DDR = 0; // Echo port is input
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00D0 
; 0000 00D1 while (1)
;PCODE: $00000155 VOL: 0
; 0000 00D2       {
; 0000 00D3         lcd_clear();
;PCODE: $00000156 VOL: 0
; 0000 00D4         lcd_gotoxy(0,0);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00D5         activeDistantSensor();
;PCODE: $0000015C VOL: 0
; 0000 00D6         curBtn = read_adc(5);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00D7 
; 0000 00D8         if(curBtn == openBtn)
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00D9         {
; 0000 00DA             open();
;PCODE: $00000164 VOL: 0
; 0000 00DB         }
; 0000 00DC         else if(curBtn == closeBtn)
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00DD         {
; 0000 00DE             close();
;PCODE: $0000016A VOL: 0
; 0000 00DF         }
; 0000 00E0         else if(curBtn == leftBtn && OCR2A == 20)
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00E1         {
; 0000 00E2             adjustLeft();
;PCODE: $00000177 VOL: 0
; 0000 00E3         }
; 0000 00E4         else if(curBtn == rightBtn && OCR2A == 20)
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00E5         {
; 0000 00E6             adjustRight();
;PCODE: $00000184 VOL: 0
; 0000 00E7         }
; 0000 00E8         else if(curBtn == upBtn && OCR2A == 20)
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00E9         {
; 0000 00EA             adjustUp();
;PCODE: $00000191 VOL: 0
; 0000 00EB         }
; 0000 00EC         else if(curBtn == downBtn && OCR2A == 20)
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00ED         {
; 0000 00EE             adjustDown();
;PCODE: $0000019E VOL: 0
; 0000 00EF         }
; 0000 00F0         delay_ms(200);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00F1       }
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00F2 }
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
