;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;
;#define openBtn 1023
;#define closeBtn 713
;#define leftBtn 539
;#define rightBtn 394
;#define upBtn 269
;#define downBtn 146
;
;#define ADC_VREF_TYPE 0x40
;unsigned int read_adc(unsigned char adc_input)
; 0000 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000F ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0010 // Delay needed for the stabilization of the ADC input voltage
; 0000 0011 delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 0012 // Start the AD conversion
; 0000 0013 ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0014 // Wait for the AD conversion to complete
; 0000 0015 while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0016 ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0017 return ADCW;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0018 }
;PCODE: $00000022 VOL: 0
;
;void hienThi(unsigned int thamSo)
; 0000 001B {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001C     unsigned char ngan, tram, chuc, donVi;
; 0000 001D     ngan = thamSo/1000;
;PCODE: $00000025 VOL: 0
;	thamSo -> Y+4
;	ngan -> R17
;	tram -> R16
;	chuc -> R19
;	donVi -> R18
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001E     tram = thamSo/100%10;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 001F     chuc = thamSo/10%10;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0020     donVi = thamSo%10;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0021     lcd_putchar(ngan + 48);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0022     lcd_putchar(tram + 48);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0023     lcd_putchar(chuc + 48);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0024     lcd_putchar(donVi + 48);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0025 }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;void main(void)
; 0000 0028 {
;PCODE: $00000050 VOL: 0
; 0000 0029 unsigned int curBtn;
; 0000 002A 
; 0000 002B // Crystal Oscillator division factor: 1
; 0000 002C #pragma optsize-
; 0000 002D CLKPR=0x80;
;	curBtn -> R16,R17
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002E CLKPR=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 002F #ifdef _OPTIMIZE_SIZE_
; 0000 0030 #pragma optsize+
; 0000 0031 #endif
; 0000 0032 
; 0000 0033 // Timer/Counter 0 initialization
; 0000 0034 TCCR0A=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0035 TCCR0B=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0036 TCNT0=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0037 OCR0A=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0038 OCR0B=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0039 
; 0000 003A // Timer/Counter 1 initialization
; 0000 003B TCCR1A=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003C TCCR1B=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003D TCNT1H=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003E TCNT1L=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003F ICR1H=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0040 ICR1L=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0041 OCR1AH=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0042 OCR1AL=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0043 OCR1BH=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0044 OCR1BL=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0045 
; 0000 0046 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0047 TIMSK0=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0048 
; 0000 0049 // Timer/Counter 1 Interrupt(s) initialization
; 0000 004A TIMSK1=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 004B 
; 0000 004C // ADC initialization
; 0000 004D // ADC Clock frequency: 500,000 kHz
; 0000 004E // ADC Voltage Reference: AVCC pin
; 0000 004F // ADC Auto Trigger Source: ADC Stopped
; 0000 0050 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 0051 // ADC4: On, ADC5: Off
; 0000 0052 DIDR0=0x20;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0053 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0054 ADCSRA=0x81;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0055 
; 0000 0056 // Characters/line: 16
; 0000 0057 lcd_init(16);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0058 
; 0000 0059 #asm("sei")
;PCODE: $00000080 VOL: 0
	sei
;PCODE: $00000081 VOL: 0
; 0000 005A 
; 0000 005B while (1)
;PCODE: $00000082 VOL: 0
; 0000 005C       {
; 0000 005D         curBtn = read_adc(5);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 005E         lcd_clear();
;PCODE: $00000087 VOL: 0
; 0000 005F         lcd_gotoxy(0,0);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0060         hienThi(curBtn);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0061         delay_ms(300);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0062       }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0063 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
