
AVRASM ver. 2.1.30  E:\Power side-view mirror\code\List\mirror.asm Thu Sep 15 20:50:22 2022

E:\Power side-view mirror\code\List\mirror.asm(1061): warning: Register r4 already defined by the .DEF directive
E:\Power side-view mirror\code\List\mirror.asm(1062): warning: Register r3 already defined by the .DEF directive
E:\Power side-view mirror\code\List\mirror.asm(1063): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Advanced
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega328P
                 ;Program type             : Application
                 ;Clock frequency          : 1,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2303
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R3
                 	.DEF __lcd_maxx=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x2000003:
000034 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000035 0002      	.DW  0x02
000036 0300      	.DW  __base_y_G100
000037 0068      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bff5      	OUT  MCUCR,R31
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003f e1f8      	LDI  R31,0x18
000040 95a8      	WDR
000041 b7a4      	IN   R26,MCUSR
000042 7fa7      	CBR  R26,8
000043 bfa4      	OUT  MCUSR,R26
000044 93f0 0060 	STS  WDTCSR,R31
000046 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e0a0      	LDI  R26,LOW(__SRAM_START)
000051 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000052 93ed      	ST   X+,R30
000053 9701      	SBIW R24,1
000054 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000055 e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000056 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000057 9185      	LPM  R24,Z+
000058 9195      	LPM  R25,Z+
000059 9700      	SBIW R24,0
00005a f061      	BREQ __GLOBAL_INI_END
00005b 91a5      	LPM  R26,Z+
00005c 91b5      	LPM  R27,Z+
00005d 9005      	LPM  R0,Z+
00005e 9015      	LPM  R1,Z+
00005f 01bf      	MOVW R22,R30
000060 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000061 9005      	LPM  R0,Z+
000062 920d      	ST   X+,R0
000063 9701      	SBIW R24,1
000064 f7e1      	BRNE __GLOBAL_INI_LOOP
000065 01fb      	MOVW R30,R22
000066 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000067 e0e0      	LDI  R30,__GPIOR0_INIT
000068 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000069 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006a bfed      	OUT  SPL,R30
00006b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006e e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006f 940c 00b3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;#define openBtn 1023
                 ;#define closeBtn 713
                 ;#define leftBtn 539
                 ;#define rightBtn 394
                 ;#define upBtn 269
                 ;#define downBtn 146
                 ;
                 ;#define ADC_VREF_TYPE 0x40
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 000E {
                 
                 	.CSEG
                 _read_adc:
                 ; 0000 000F ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
000071 81e8      	LD   R30,Y
000072 64e0      	ORI  R30,0x40
000073 93e0 007c 	STS  124,R30
                 ; 0000 0010 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0011 delay_us(10);
                +
000075 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000076 958a     +DEC R24
000077 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0012 // Start the AD conversion
                 ; 0000 0013 ADCSRA|=0x40;
000078 91e0 007a 	LDS  R30,122
00007a 64e0      	ORI  R30,0x40
00007b 93e0 007a 	STS  122,R30
                 ; 0000 0014 // Wait for the AD conversion to complete
                 ; 0000 0015 while ((ADCSRA & 0x10)==0);
                 _0x3:
00007d 91e0 007a 	LDS  R30,122
00007f 71e0      	ANDI R30,LOW(0x10)
000080 f3e1      	BREQ _0x3
                 ; 0000 0016 ADCSRA|=0x10;
000081 91e0 007a 	LDS  R30,122
000083 61e0      	ORI  R30,0x10
000084 93e0 007a 	STS  122,R30
                 ; 0000 0017 return ADCW;
000086 91e0 0078 	LDS  R30,120
000088 91f0 0079 	LDS  R31,120+1
00008a c0f2      	RJMP _0x2020001
                 ; 0000 0018 }
                 ;
                 ;void hienThi(unsigned int thamSo)
                 ; 0000 001B {
                 _hienThi:
                 ; 0000 001C     unsigned char ngan, tram, chuc, donVi;
                 ; 0000 001D     ngan = thamSo/1000;
00008b 940e 01bc 	CALL __SAVELOCR4
                 ;	thamSo -> Y+4
                 ;	ngan -> R17
                 ;	tram -> R16
                 ;	chuc -> R19
                 ;	donVi -> R18
00008d 81ac      	LDD  R26,Y+4
00008e 81bd      	LDD  R27,Y+4+1
00008f eee8      	LDI  R30,LOW(1000)
000090 e0f3      	LDI  R31,HIGH(1000)
000091 940e 01a6 	CALL __DIVW21U
000093 2f1e      	MOV  R17,R30
                 ; 0000 001E     tram = thamSo/100%10;
000094 81ac      	LDD  R26,Y+4
000095 81bd      	LDD  R27,Y+4+1
000096 e6e4      	LDI  R30,LOW(100)
000097 e0f0      	LDI  R31,HIGH(100)
000098 d0e6      	RCALL SUBOPT_0x0
000099 2f0e      	MOV  R16,R30
                 ; 0000 001F     chuc = thamSo/10%10;
00009a 81ac      	LDD  R26,Y+4
00009b 81bd      	LDD  R27,Y+4+1
00009c e0ea      	LDI  R30,LOW(10)
00009d e0f0      	LDI  R31,HIGH(10)
00009e d0e0      	RCALL SUBOPT_0x0
00009f 2f3e      	MOV  R19,R30
                 ; 0000 0020     donVi = thamSo%10;
0000a0 81ac      	LDD  R26,Y+4
0000a1 81bd      	LDD  R27,Y+4+1
0000a2 e0ea      	LDI  R30,LOW(10)
0000a3 e0f0      	LDI  R31,HIGH(10)
0000a4 940e 01b9 	CALL __MODW21U
0000a6 2f2e      	MOV  R18,R30
                 ; 0000 0021     lcd_putchar(ngan + 48);
0000a7 2fe1      	MOV  R30,R17
0000a8 d0de      	RCALL SUBOPT_0x1
                 ; 0000 0022     lcd_putchar(tram + 48);
0000a9 2fe0      	MOV  R30,R16
0000aa d0dc      	RCALL SUBOPT_0x1
                 ; 0000 0023     lcd_putchar(chuc + 48);
0000ab 2fe3      	MOV  R30,R19
0000ac d0da      	RCALL SUBOPT_0x1
                 ; 0000 0024     lcd_putchar(donVi + 48);
0000ad 2fe2      	MOV  R30,R18
0000ae d0d8      	RCALL SUBOPT_0x1
                 ; 0000 0025 }
0000af 940e 01c1 	CALL __LOADLOCR4
0000b1 9626      	ADIW R28,6
0000b2 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 0028 {
                 _main:
                 ; 0000 0029 unsigned int curBtn;
                 ; 0000 002A 
                 ; 0000 002B // Crystal Oscillator division factor: 1
                 ; 0000 002C #pragma optsize-
                 ; 0000 002D CLKPR=0x80;
                 ;	curBtn -> R16,R17
0000b3 e8e0      	LDI  R30,LOW(128)
0000b4 93e0 0061 	STS  97,R30
                 ; 0000 002E CLKPR=0x00;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 93e0 0061 	STS  97,R30
                 ; 0000 002F #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0030 #pragma optsize+
                 ; 0000 0031 #endif
                 ; 0000 0032 
                 ; 0000 0033 // Timer/Counter 0 initialization
                 ; 0000 0034 TCCR0A=0x00;
0000b9 bde4      	OUT  0x24,R30
                 ; 0000 0035 TCCR0B=0x00;
0000ba bde5      	OUT  0x25,R30
                 ; 0000 0036 TCNT0=0x00;
0000bb bde6      	OUT  0x26,R30
                 ; 0000 0037 OCR0A=0x00;
0000bc bde7      	OUT  0x27,R30
                 ; 0000 0038 OCR0B=0x00;
0000bd bde8      	OUT  0x28,R30
                 ; 0000 0039 
                 ; 0000 003A // Timer/Counter 1 initialization
                 ; 0000 003B TCCR1A=0x00;
0000be 93e0 0080 	STS  128,R30
                 ; 0000 003C TCCR1B=0x00;
0000c0 93e0 0081 	STS  129,R30
                 ; 0000 003D TCNT1H=0x00;
0000c2 93e0 0085 	STS  133,R30
                 ; 0000 003E TCNT1L=0x00;
0000c4 93e0 0084 	STS  132,R30
                 ; 0000 003F ICR1H=0x00;
0000c6 93e0 0087 	STS  135,R30
                 ; 0000 0040 ICR1L=0x00;
0000c8 93e0 0086 	STS  134,R30
                 ; 0000 0041 OCR1AH=0x00;
0000ca 93e0 0089 	STS  137,R30
                 ; 0000 0042 OCR1AL=0x00;
0000cc 93e0 0088 	STS  136,R30
                 ; 0000 0043 OCR1BH=0x00;
0000ce 93e0 008b 	STS  139,R30
                 ; 0000 0044 OCR1BL=0x00;
0000d0 93e0 008a 	STS  138,R30
                 ; 0000 0045 
                 ; 0000 0046 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0047 TIMSK0=0x00;
0000d2 93e0 006e 	STS  110,R30
                 ; 0000 0048 
                 ; 0000 0049 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 004A TIMSK1=0x00;
0000d4 93e0 006f 	STS  111,R30
                 ; 0000 004B 
                 ; 0000 004C // ADC initialization
                 ; 0000 004D // ADC Clock frequency: 500,000 kHz
                 ; 0000 004E // ADC Voltage Reference: AVCC pin
                 ; 0000 004F // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0050 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0051 // ADC4: On, ADC5: Off
                 ; 0000 0052 DIDR0=0x20;
0000d6 e2e0      	LDI  R30,LOW(32)
0000d7 93e0 007e 	STS  126,R30
                 ; 0000 0053 ADMUX=ADC_VREF_TYPE & 0xff;
0000d9 e4e0      	LDI  R30,LOW(64)
0000da 93e0 007c 	STS  124,R30
                 ; 0000 0054 ADCSRA=0x81;
0000dc e8e1      	LDI  R30,LOW(129)
0000dd 93e0 007a 	STS  122,R30
                 ; 0000 0055 
                 ; 0000 0056 // Characters/line: 16
                 ; 0000 0057 lcd_init(16);
0000df e1e0      	LDI  R30,LOW(16)
0000e0 93ea      	ST   -Y,R30
0000e1 d06f      	RCALL _lcd_init
                 ; 0000 0058 
                 ; 0000 0059 #asm("sei")
0000e2 9478      	sei
                 ; 0000 005A 
                 ; 0000 005B while (1)
                 _0x6:
                 ; 0000 005C       {
                 ; 0000 005D         curBtn = read_adc(5);
0000e3 e0e5      	LDI  R30,LOW(5)
0000e4 93ea      	ST   -Y,R30
0000e5 df8b      	RCALL _read_adc
0000e6 018f      	MOVW R16,R30
                 ; 0000 005E         lcd_clear();
0000e7 d04a      	RCALL _lcd_clear
                 ; 0000 005F         lcd_gotoxy(0,0);
0000e8 e0e0      	LDI  R30,LOW(0)
0000e9 93ea      	ST   -Y,R30
0000ea 93ea      	ST   -Y,R30
0000eb d039      	RCALL _lcd_gotoxy
                 ; 0000 0060         hienThi(curBtn);
0000ec 931a      	ST   -Y,R17
0000ed 930a      	ST   -Y,R16
0000ee df9c      	RCALL _hienThi
                 ; 0000 0061         delay_ms(300);
0000ef e2ec      	LDI  R30,LOW(300)
0000f0 e0f1      	LDI  R31,HIGH(300)
0000f1 d098      	RCALL SUBOPT_0x2
                 ; 0000 0062       }
0000f2 cff0      	RJMP _0x6
                 ; 0000 0063 }
                 _0x9:
0000f3 cfff      	RJMP _0x9
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0000f4 81e8      	LD   R30,Y
0000f5 71e0      	ANDI R30,LOW(0x10)
0000f6 f011      	BREQ _0x2000004
0000f7 9a2e      	SBI  0x5,6
0000f8 c001      	RJMP _0x2000005
                 _0x2000004:
0000f9 982e      	CBI  0x5,6
                 _0x2000005:
0000fa 81e8      	LD   R30,Y
0000fb 72e0      	ANDI R30,LOW(0x20)
0000fc f011      	BREQ _0x2000006
0000fd 9a2f      	SBI  0x5,7
0000fe c001      	RJMP _0x2000007
                 _0x2000006:
0000ff 982f      	CBI  0x5,7
                 _0x2000007:
000100 81e8      	LD   R30,Y
000101 74e0      	ANDI R30,LOW(0x40)
000102 f011      	BREQ _0x2000008
000103 9a5e      	SBI  0xB,6
000104 c001      	RJMP _0x2000009
                 _0x2000008:
000105 985e      	CBI  0xB,6
                 _0x2000009:
000106 81e8      	LD   R30,Y
000107 78e0      	ANDI R30,LOW(0x80)
000108 f011      	BREQ _0x200000A
000109 9a5f      	SBI  0xB,7
00010a c001      	RJMP _0x200000B
                 _0x200000A:
00010b 985f      	CBI  0xB,7
                 _0x200000B:
                +
00010c e081     +LDI R24 , LOW ( 1 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 1
00010f 9a2d      	SBI  0x5,5
                +
000110 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000111 958a     +DEC R24
000112 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000113 982d      	CBI  0x5,5
                +
000114 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000115 958a     +DEC R24
000116 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000117 c065      	RJMP _0x2020001
                 __lcd_write_data:
000118 81e8      	LD   R30,Y
000119 93ea      	ST   -Y,R30
00011a dfd9      	RCALL __lcd_write_nibble_G100
00011b 81e8          ld    r30,y
00011c 95e2          swap  r30
00011d 83e8          st    y,r30
00011e 81e8      	LD   R30,Y
00011f 93ea      	ST   -Y,R30
000120 dfd3      	RCALL __lcd_write_nibble_G100
                +
000121 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000122 958a     +DEC R24
000123 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000124 c058      	RJMP _0x2020001
                 _lcd_gotoxy:
000125 81e8      	LD   R30,Y
000126 e0f0      	LDI  R31,0
000127 50e0      	SUBI R30,LOW(-__base_y_G100)
000128 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000129 81e0      	LD   R30,Z
00012a 81a9      	LDD  R26,Y+1
00012b 0fea      	ADD  R30,R26
00012c 93ea      	ST   -Y,R30
00012d dfea      	RCALL __lcd_write_data
00012e 8049      	LDD  R4,Y+1
00012f 8038      	LDD  R3,Y+0
000130 9622      	ADIW R28,2
000131 9508      	RET
                 _lcd_clear:
000132 e0e2      	LDI  R30,LOW(2)
000133 d05a      	RCALL SUBOPT_0x3
000134 e0ec      	LDI  R30,LOW(12)
000135 93ea      	ST   -Y,R30
000136 dfe1      	RCALL __lcd_write_data
000137 e0e1      	LDI  R30,LOW(1)
000138 d055      	RCALL SUBOPT_0x3
000139 e0e0      	LDI  R30,LOW(0)
00013a 2e3e      	MOV  R3,R30
00013b 2e4e      	MOV  R4,R30
00013c 9508      	RET
                 _lcd_putchar:
00013d 81a8      	LD   R26,Y
00013e 30aa      	CPI  R26,LOW(0xA)
00013f f011      	BREQ _0x2000011
000140 1446      	CP   R4,R6
000141 f040      	BRLO _0x2000010
                 _0x2000011:
000142 e0e0      	LDI  R30,LOW(0)
000143 93ea      	ST   -Y,R30
000144 9433      	INC  R3
000145 923a      	ST   -Y,R3
000146 dfde      	RCALL _lcd_gotoxy
000147 81a8      	LD   R26,Y
000148 30aa      	CPI  R26,LOW(0xA)
000149 f199      	BREQ _0x2020001
                 _0x2000010:
00014a 9443      	INC  R4
00014b 9a2b      	SBI  0x5,3
00014c 81e8      	LD   R30,Y
00014d 93ea      	ST   -Y,R30
00014e dfc9      	RCALL __lcd_write_data
00014f 982b      	CBI  0x5,3
000150 c02c      	RJMP _0x2020001
                 _lcd_init:
000151 9a26      	SBI  0x4,6
000152 9a27      	SBI  0x4,7
000153 9a56      	SBI  0xA,6
000154 9a57      	SBI  0xA,7
000155 9a25      	SBI  0x4,5
000156 9a23      	SBI  0x4,3
000157 9a24      	SBI  0x4,4
000158 982d      	CBI  0x5,5
000159 982b      	CBI  0x5,3
00015a 982c      	CBI  0x5,4
00015b 8068      	LDD  R6,Y+0
00015c 81e8      	LD   R30,Y
00015d 58e0      	SUBI R30,-LOW(128)
                +
00015e 93e0 0302+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000160 81e8      	LD   R30,Y
000161 54e0      	SUBI R30,-LOW(192)
                +
000162 93e0 0303+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000164 e1e4      	LDI  R30,LOW(20)
000165 e0f0      	LDI  R31,HIGH(20)
000166 d023      	RCALL SUBOPT_0x2
000167 d02b      	RCALL SUBOPT_0x4
000168 d02a      	RCALL SUBOPT_0x4
000169 d029      	RCALL SUBOPT_0x4
00016a e2e0      	LDI  R30,LOW(32)
00016b 93ea      	ST   -Y,R30
00016c df87      	RCALL __lcd_write_nibble_G100
                +
00016d e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00016e 958a     +DEC R24
00016f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000170 e2e8      	LDI  R30,LOW(40)
000171 93ea      	ST   -Y,R30
000172 dfa5      	RCALL __lcd_write_data
000173 e0e4      	LDI  R30,LOW(4)
000174 93ea      	ST   -Y,R30
000175 dfa2      	RCALL __lcd_write_data
000176 e8e5      	LDI  R30,LOW(133)
000177 93ea      	ST   -Y,R30
000178 df9f      	RCALL __lcd_write_data
000179 e0e6      	LDI  R30,LOW(6)
00017a 93ea      	ST   -Y,R30
00017b df9c      	RCALL __lcd_write_data
00017c dfb5      	RCALL _lcd_clear
                 _0x2020001:
00017d 9621      	ADIW R28,1
00017e 9508      	RET
                 
                 	.DSEG
                 __base_y_G100:
000300           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
00017f 940e 01a6 	CALL __DIVW21U
000181 01df      	MOVW R26,R30
000182 e0ea      	LDI  R30,LOW(10)
000183 e0f0      	LDI  R31,HIGH(10)
000184 940e 01b9 	CALL __MODW21U
000186 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000187 5de0      	SUBI R30,-LOW(48)
000188 93ea      	ST   -Y,R30
000189 cfb3      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00018a 93fa      	ST   -Y,R31
00018b 93ea      	ST   -Y,R30
00018c 940c 019a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
00018e 93ea      	ST   -Y,R30
00018f df88      	RCALL __lcd_write_data
000190 e0e3      	LDI  R30,LOW(3)
000191 e0f0      	LDI  R31,HIGH(3)
000192 cff7      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000193 e3e0      	LDI  R30,LOW(48)
000194 93ea      	ST   -Y,R30
000195 df5e      	RCALL __lcd_write_nibble_G100
                +
000196 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000197 958a     +DEC R24
000198 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000199 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00019a 91e9      	ld   r30,y+
00019b 91f9      	ld   r31,y+
00019c 9630      	adiw r30,0
00019d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00019e ef8a     +LDI R24 , LOW ( 0xFA )
00019f e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001a0 9701     +SBIW R24 , 1
0001a1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001a2 95a8      	wdr
0001a3 9731      	sbiw r30,1
0001a4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001a5 9508      	ret
                 
                 __DIVW21U:
0001a6 2400      	CLR  R0
0001a7 2411      	CLR  R1
0001a8 e190      	LDI  R25,16
                 __DIVW21U1:
0001a9 0faa      	LSL  R26
0001aa 1fbb      	ROL  R27
0001ab 1c00      	ROL  R0
0001ac 1c11      	ROL  R1
0001ad 1a0e      	SUB  R0,R30
0001ae 0a1f      	SBC  R1,R31
0001af f418      	BRCC __DIVW21U2
0001b0 0e0e      	ADD  R0,R30
0001b1 1e1f      	ADC  R1,R31
0001b2 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001b3 60a1      	SBR  R26,1
                 __DIVW21U3:
0001b4 959a      	DEC  R25
0001b5 f799      	BRNE __DIVW21U1
0001b6 01fd      	MOVW R30,R26
0001b7 01d0      	MOVW R26,R0
0001b8 9508      	RET
                 
                 __MODW21U:
0001b9 dfec      	RCALL __DIVW21U
0001ba 01fd      	MOVW R30,R26
0001bb 9508      	RET
                 
                 __SAVELOCR4:
0001bc 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001bd 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001be 931a      	ST   -Y,R17
0001bf 930a      	ST   -Y,R16
0001c0 9508      	RET
                 
                 __LOADLOCR4:
0001c1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001c2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001c3 8119      	LDD  R17,Y+1
0001c4 8108      	LD   R16,Y
0001c5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   9 r1 :   5 r2 :   0 r3 :   4 r4 :   4 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:   5 r18:   4 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  23 r25:   5 r26:  22 r27:   8 r28:   4 r29:   1 r30: 140 r31:  20 
x  :   3 y  :  60 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   4 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   6 
cbi   :   9 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   2 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   2 jmp   :  28 ld    :  18 ldd   :  15 ldi   :  61 
lds   :   5 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  10 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   3 out   :  12 pop   :   0 push  :   0 rcall :  33 ret   :  11 
reti  :   0 rjmp  :  14 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  13 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  31 std   :   0 sts   :  24 sub   :   1 subi  :   4 swap  :   1 
tst   :   0 wdr   :   2 
Instructions used: 45 out of 116 (38.8%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00038c    898     10    908   32768   2.8%
[.dseg] 0x000100 0x000304      0      4      4    2303   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
